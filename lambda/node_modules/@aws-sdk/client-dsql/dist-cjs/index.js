'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "dsql",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class DSQLClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultDSQLHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class DSQLServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, DSQLServiceException.prototype);
    }
}

class AccessDeniedException extends DSQLServiceException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
const ClusterStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETED: "DELETED",
    DELETING: "DELETING",
    FAILED: "FAILED",
    IDLE: "IDLE",
    INACTIVE: "INACTIVE",
    PENDING_DELETE: "PENDING_DELETE",
    PENDING_SETUP: "PENDING_SETUP",
    UPDATING: "UPDATING",
};
class ConflictException extends DSQLServiceException {
    name = "ConflictException";
    $fault = "client";
    resourceId;
    resourceType;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
const EncryptionStatus = {
    ENABLED: "ENABLED",
    ENABLING: "ENABLING",
    KMS_KEY_INACCESSIBLE: "KMS_KEY_INACCESSIBLE",
    UPDATING: "UPDATING",
};
const EncryptionType = {
    AWS_OWNED_KMS_KEY: "AWS_OWNED_KMS_KEY",
    CUSTOMER_MANAGED_KMS_KEY: "CUSTOMER_MANAGED_KMS_KEY",
};
class InternalServerException extends DSQLServiceException {
    name = "InternalServerException";
    $fault = "server";
    $retryable = {};
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
class ServiceQuotaExceededException extends DSQLServiceException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    resourceId;
    resourceType;
    serviceCode;
    quotaCode;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
    }
}
class ThrottlingException extends DSQLServiceException {
    name = "ThrottlingException";
    $fault = "client";
    $retryable = {
        throttling: true,
    };
    serviceCode;
    quotaCode;
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.serviceCode = opts.serviceCode;
        this.quotaCode = opts.quotaCode;
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
const ValidationExceptionReason = {
    CANNOT_PARSE: "cannotParse",
    DELETION_PROTECTION_ENABLED: "deletionProtectionEnabled",
    FIELD_VALIDATION_FAILED: "fieldValidationFailed",
    OTHER: "other",
    UNKNOWN_OPERATION: "unknownOperation",
};
class ValidationException extends DSQLServiceException {
    name = "ValidationException";
    $fault = "client";
    reason;
    fieldList;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.reason = opts.reason;
        this.fieldList = opts.fieldList;
    }
}
class ResourceNotFoundException extends DSQLServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    resourceId;
    resourceType;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}

const se_CreateClusterCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cluster");
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        clientToken: [true, (_) => _ ?? uuid.v4()],
        deletionProtectionEnabled: [],
        kmsEncryptionKey: [],
        multiRegionProperties: (_) => smithyClient._json(_),
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_DeleteClusterCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/cluster/{identifier}");
    b.p("identifier", () => input.identifier, "{identifier}", false);
    const query = smithyClient.map({
        [_ct]: [, input[_cT] ?? uuid.v4()],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_GetClusterCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/cluster/{identifier}");
    b.p("identifier", () => input.identifier, "{identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_GetVpcEndpointServiceNameCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/clusters/{identifier}/vpc-endpoint-service-name");
    b.p("identifier", () => input.identifier, "{identifier}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_ListClustersCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/cluster");
    const query = smithyClient.map({
        [_mr]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nt]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
const se_TagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        tags: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const se_UntagResourceCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = smithyClient.map({
        [_tK]: [smithyClient.expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
const se_UpdateClusterCommand = async (input, context) => {
    const b = core.requestBuilder(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/cluster/{identifier}");
    b.p("identifier", () => input.identifier, "{identifier}", false);
    let body;
    body = JSON.stringify(smithyClient.take(input, {
        clientToken: [true, (_) => _ ?? uuid.v4()],
        deletionProtectionEnabled: [],
        kmsEncryptionKey: [],
        multiRegionProperties: (_) => smithyClient._json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
const de_CreateClusterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        arn: smithyClient.expectString,
        creationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        deletionProtectionEnabled: smithyClient.expectBoolean,
        encryptionDetails: smithyClient._json,
        identifier: smithyClient.expectString,
        multiRegionProperties: smithyClient._json,
        status: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_DeleteClusterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        arn: smithyClient.expectString,
        creationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        identifier: smithyClient.expectString,
        status: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetClusterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        arn: smithyClient.expectString,
        creationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        deletionProtectionEnabled: smithyClient.expectBoolean,
        encryptionDetails: smithyClient._json,
        identifier: smithyClient.expectString,
        multiRegionProperties: smithyClient._json,
        status: smithyClient.expectString,
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_GetVpcEndpointServiceNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        serviceName: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListClustersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        clusters: smithyClient._json,
        nextToken: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        tags: smithyClient._json,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    await smithyClient.collectBody(output.body, context);
    return contents;
};
const de_UpdateClusterCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = smithyClient.map({
        $metadata: deserializeMetadata(output),
    });
    const data = smithyClient.expectNonNull(smithyClient.expectObject(await core$1.parseJsonBody(output.body, context)), "body");
    const doc = smithyClient.take(data, {
        arn: smithyClient.expectString,
        creationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        identifier: smithyClient.expectString,
        status: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.dsql#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.dsql#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        case "InternalServerException":
        case "com.amazonaws.dsql#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.dsql#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput);
        case "ThrottlingException":
        case "com.amazonaws.dsql#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput);
        case "ValidationException":
        case "com.amazonaws.dsql#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.dsql#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = smithyClient.withBaseException(DSQLServiceException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
        resourceId: smithyClient.expectString,
        resourceType: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => smithyClient.strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
        resourceId: smithyClient.expectString,
        resourceType: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
        quotaCode: smithyClient.expectString,
        resourceId: smithyClient.expectString,
        resourceType: smithyClient.expectString,
        serviceCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => smithyClient.strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        message: smithyClient.expectString,
        quotaCode: smithyClient.expectString,
        serviceCode: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = smithyClient.map({});
    const data = parsedOutput.body;
    const doc = smithyClient.take(data, {
        fieldList: smithyClient._json,
        message: smithyClient.expectString,
        reason: smithyClient.expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return smithyClient.decorateServiceException(exception, parsedOutput.body);
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const _cT = "clientToken";
const _ct = "client-token";
const _mR = "maxResults";
const _mr = "max-results";
const _nT = "nextToken";
const _nt = "next-token";
const _rAS = "retryAfterSeconds";
const _ra = "retry-after";
const _tK = "tagKeys";

class CreateClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "CreateCluster", {})
    .n("DSQLClient", "CreateClusterCommand")
    .f(void 0, void 0)
    .ser(se_CreateClusterCommand)
    .de(de_CreateClusterCommand)
    .build() {
}

class DeleteClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "DeleteCluster", {})
    .n("DSQLClient", "DeleteClusterCommand")
    .f(void 0, void 0)
    .ser(se_DeleteClusterCommand)
    .de(de_DeleteClusterCommand)
    .build() {
}

class GetClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "GetCluster", {})
    .n("DSQLClient", "GetClusterCommand")
    .f(void 0, void 0)
    .ser(se_GetClusterCommand)
    .de(de_GetClusterCommand)
    .build() {
}

class GetVpcEndpointServiceNameCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "GetVpcEndpointServiceName", {})
    .n("DSQLClient", "GetVpcEndpointServiceNameCommand")
    .f(void 0, void 0)
    .ser(se_GetVpcEndpointServiceNameCommand)
    .de(de_GetVpcEndpointServiceNameCommand)
    .build() {
}

class ListClustersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "ListClusters", {})
    .n("DSQLClient", "ListClustersCommand")
    .f(void 0, void 0)
    .ser(se_ListClustersCommand)
    .de(de_ListClustersCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "ListTagsForResource", {})
    .n("DSQLClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "TagResource", {})
    .n("DSQLClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "UntagResource", {})
    .n("DSQLClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("DSQL", "UpdateCluster", {})
    .n("DSQLClient", "UpdateClusterCommand")
    .f(void 0, void 0)
    .ser(se_UpdateClusterCommand)
    .de(de_UpdateClusterCommand)
    .build() {
}

const commands = {
    CreateClusterCommand,
    DeleteClusterCommand,
    GetClusterCommand,
    GetVpcEndpointServiceNameCommand,
    ListClustersCommand,
    ListTagsForResourceCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateClusterCommand,
};
class DSQL extends DSQLClient {
}
smithyClient.createAggregatedClient(commands, DSQL);

const paginateListClusters = core.createPaginator(DSQLClient, ListClustersCommand, "nextToken", "nextToken", "maxResults");

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetClusterCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.status;
            };
            if (returnComparator() === "ACTIVE") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForClusterActive = async (params, input) => {
    const serviceDefaults = { minDelay: 2, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilClusterActive = async (params, input) => {
    const serviceDefaults = { minDelay: 2, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetClusterCommand(input));
        reason = result;
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForClusterNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 2, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilClusterNotExists = async (params, input) => {
    const serviceDefaults = { minDelay: 2, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccessDeniedException = AccessDeniedException;
exports.ClusterStatus = ClusterStatus;
exports.ConflictException = ConflictException;
exports.CreateClusterCommand = CreateClusterCommand;
exports.DSQL = DSQL;
exports.DSQLClient = DSQLClient;
exports.DSQLServiceException = DSQLServiceException;
exports.DeleteClusterCommand = DeleteClusterCommand;
exports.EncryptionStatus = EncryptionStatus;
exports.EncryptionType = EncryptionType;
exports.GetClusterCommand = GetClusterCommand;
exports.GetVpcEndpointServiceNameCommand = GetVpcEndpointServiceNameCommand;
exports.InternalServerException = InternalServerException;
exports.ListClustersCommand = ListClustersCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
exports.TagResourceCommand = TagResourceCommand;
exports.ThrottlingException = ThrottlingException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateClusterCommand = UpdateClusterCommand;
exports.ValidationException = ValidationException;
exports.ValidationExceptionReason = ValidationExceptionReason;
exports.paginateListClusters = paginateListClusters;
exports.waitForClusterActive = waitForClusterActive;
exports.waitForClusterNotExists = waitForClusterNotExists;
exports.waitUntilClusterActive = waitUntilClusterActive;
exports.waitUntilClusterNotExists = waitUntilClusterNotExists;
